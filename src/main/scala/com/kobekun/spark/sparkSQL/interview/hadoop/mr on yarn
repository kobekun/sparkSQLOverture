

mr2.x设计架构 (MR on Yarn、MR提交作业)

RM：
    application manager应用程序管理器
    resource scheduler 资源memory调度器

 container 虚拟的概念  在nodemanager中
        专门用来MR、spark等技术的最小单元
        map task 默认 2个  mapreduce.job.maps 2
            split将文件分成几个片，就是几个map task
            如果是两个小文件，就分成两个片，如果是一个文件，就是一个片

        reduce task  默认 1个

1、用户向yarn提交应用程序(app job) jar文件、SQL，包括ApplicationMaster程序
2、RM为该job分配第一个container，运行AM
3、AM首先向application manager注册(在yarn web界面能看到这个job的运行状态)
4、AM采用轮询的方式通过rpc协议向RM申请和领取资源

---------------------------------------------------

5、一旦AM拿到资源，就对应的与NM通信，
6、NM为任务设置好运行环境(jar包)，将任务启动命令放在脚本中，通过该脚本启动任务
7、各个task通过rpc协议向AM汇报自己的状态，从而掌握各个任务的状态，从而在任务失
败时重启任务
8、AM向application manager注销并关闭自己


总结：
启动AM，申请资源；1-4
运行任务，直到任务完成 5-8

尽量在生产上控制文件的大小稍微小于一个blocksize
比如 128M 文件为120M

存储格式：txtfile、orc(列式)、parquet(列式存储)
压缩格式：gzip、bzip2(支持分割)、lzo(支持分割)、snappy(压缩速度快)

生产上尽量选择支持分割的，虽然一个文件大于blocksize，但是如果不选择压缩格式为支持
分割的，那么还是一个整体，虽然在物理上是分开的。

hive：orc\parquet + bzip2
hbase：HFile + snappy

shuffle: 洗牌，聚合之前把相同的key放在一块     属于reduce阶段




