
1、数据仓库
	一堆数据集合	log类型(insert)  db关系型(insert update delete)
	挖掘有效价值	report(静态报表，动态报表 运营)、实时大屏、对其他业务提供指标计算(智能分单 包装方案智能推荐)
		各仓库每小时订单量  
		各仓库每天订单量  (每小时汇总)
		各仓库各个供应商每小时订单量 
		各仓库各个供应商每天订单量(每小时订单量)
		
		底层存储只需要：各仓库各个供应商每小时订单量
		B01	供应商1  2019-10-01 00  1000
		B02	供应商2  2019-10-01 00  2000
		B01	供应商1  2019-10-01 01  3000
		B01	供应商1  2019-10-02 00  3000
		
		动态报表 一般存储  只存储最小粒度的多维汇总数据
		静态报表  存储各种汇总数据
		
		动态报表：上钻下钻
		仓库每天的订单量
		仓库每月的订单量
		仓库各个供应商的每月的订单量
		会自动拼接  sql ==> group by
		
	提供企业决策
	
2、数据集市
		数仓的一个子集
		
		数据仓库	数据集市
		企业级别	部门级别
		大量的全的数据 	仅自己的数据
		 
3、数仓分层
ODS(operation data store) (普通表和分区表)	原始数据层 存放原始数据 不做任何处理
DWD/DWI(data warehouse detail) (拉链表) 明细层 结构和粒度与ODS层是一致的，只做对ODS层数据进行清洗(脏数据 空值) 拉链表 脱敏(手机号 银行卡 密码(mysql加密))
DWS(data warehouse service)(普通表) 轻度汇总层 以DWD为基础 进行轻度汇总 宽表(join)
ADS/APP/domain域表(application data store)(普通表/分区表 外部表) 结果层 按主题提供统计数据(group 计算 少量可能做join计算，取决于宽表没有你想要的字段)

上游 --》下游数据量   保证数据质量	

4、命名规范
表的前缀：ods  dwd(fact dim) dws ads 
对于同一个含义的字段名称，在dws层的各表设计为统计的
订单号  orderno  orderid  id 在dws层统一为orderno
创建时间  createtime cretime ctime  create_time...  ==> create_time

5、为什么要分层
复杂问题简单化：将一个超级复杂的任务进行分解成多个步骤来完成，每一层只处理单一的步骤，比较简单，方便定位问题
减少重复开发：规范好数仓的分层，通过中间层的数据，能够减少重复计算，增加一次计算的复用性
隔离原始数据：数据脱敏，使得真实的数据和统计的数据分离  ODS  DWD/DWI  有权限  

数据仓库的分层不是越多越好，合理的层次设计，以及计算成本和人力成本的平衡，是一个好的数仓架构的表现。

6、主表明细表设计案例
订单全表
订单主表+明细表
订单主表+明细表+商品表  生产上  上游mysql的设计

思考：
1、假如是电商平台，比如京东生鲜购买。那么order订单主表，额外增加字段：收货人ID，订单状态(1未
付款，2已付款未发货，3已发货没收货，4签收)即可
2、额外增加一张收件人receiver表：收货人Id，收货人姓名、手机、省、市、区、县、详细地址的字段
3、额外增加一张物流表(insert)，记录订单流转到哪里及当前状态，那么如何设计
4、为什么有些表需要增加额外的自增长主键Id？


mysql： --》hive ods层+dwd层 --》hive dws层
orderinfo		orderinfo			order(前面表join而来)
orderitems		orderitems







































